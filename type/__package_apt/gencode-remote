#!/bin/sh -e
#
# 2011-2013 Nico Schottelius (nico-cdist at schottelius.org)
# 2021-2023 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

if [ -f "$__object/parameter/name" ]; then
   name="$(cat "$__object/parameter/name")"
else
   name="$__object_id"
fi

state_should=$(cat "${__object:?}/parameter/state")
version_should=$(cat "${__object:?}/parameter/version" 2>/dev/null) || true

if [ -f "$__object/parameter/target-release" ]; then
   target_release=$(cat "$__object/parameter/target-release")
fi

if [ -f "$__object/parameter/install-recommends" ]; then
    # required if __apt_norecommends is used
    recommendsparam="-o APT::Install-Recommends=1"
else
    recommendsparam="-o APT::Install-Recommends=0"
fi

if [ -f "$__object/parameter/purge-if-absent" ]; then
	purgeparam="--purge"
else
	purgeparam=""
fi


read -r state_is _ <"${__object:?}/explorer/state"
case ${state_is}
in
	(present)
		read -r state_is auto_state name_is version_is <"${__object:?}/explorer/state"
		;;
	(absent)
		read -r state_is config_state <"${__object:?}/explorer/state"
		name_is=${name}
		;;
	(*)
		printf 'state explorer reports invalid state: %s\n' "${state_is}" >&2
		exit 1
		;;
esac

# Hint if we need to avoid questions at some point:
# DEBIAN_PRIORITY=critical can reduce the number of questions
aptget="DEBIAN_FRONTEND=noninteractive apt-get --quiet --yes -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\""

case ${state_should}
in
    present)
        if test -n "${version_should}" -a "${version_should}" != "${version_is}"
        then
            # other version should be installed
            name="${name}=${version_should}"
            aptget="${aptget:?} -o APT::Get::allow-downgrades=true"
        elif test "${state_is}" = 'present'
        then
            if test "${auto_state}" = 'auto'
            then
                # package is installed, but marked auto -> mark it manual so
                # that it doesn't get removed by apt-get autoremove.

                # NOTE: There are two implementations of apt-mark(8) with a
                # different API. Although the new implementation (C++) still
                # supports the API of the old implementation (Python), it is
                # marked as deprecated:
                # https://salsa.debian.org/apt-team/apt/-/blob/0.8.15/cmdline/apt-mark.cc#L105
                #
                # Debian < 5 (without apt-mark) don't need to be supported,
                # because the state explorer will report all packages as manual
                # for those.
                echo 'if ! head -n1 "$(command -v apt-mark)" | grep -qF python'

                # new C++ implementation (Debian >= 7)
                echo "then apt-mark manual '${name_is}' >/dev/null"

                # old Python implementation (Debian 5-6)
                echo "else apt-mark unmarkauto '${name_is}'"

                echo 'fi'
            fi

            # package already installed -> exit
            exit 0
        fi

        # There are special arguments to apt(8) to prevent aborts if apt woudn't been
        # updated after the 19th April 2021 till the bullseye release. The additional
        # arguments acknoledge the happend suite change (the apt(8) update does the
        # same by itself).
        #
        # Using '-o $config' instead of the --allow-releaseinfo-change-* parameter
        # allows backward compatablility to pre-buster Debian versions.
        #
        # See more: ticket #861
        # https://code.ungleich.ch/ungleich-public/cdist/-/issues/861
        apt_opts="-o Acquire::AllowReleaseInfoChange::Suite=true -o Acquire::AllowReleaseInfoChange::Version=true"

        # Try to update index cache before installing a package. cdist runs all
        # type explorers first (except when CDIST_ORDER_DEPENDENCY is used) and
        # then runs generated code. Due to that we can't explore state of APT's
        # cache in explorer and generate code based on explorer's result
        # because then all instances of this type want to update cache. Instead
        # we rely on this type being nonparallel and first instance will also
        # update index cache.

        # Use __apt_update_index default.
        maxage=86400

        # Some of following code is duplicated in __apt_update_index/explorer/state.
        # If you change anything here, please make changes there too.
        cat << EOF
if [ ! -d /var/lib/apt/lists ] \\
    || [ -n "\$( find /etc/apt -newer /var/lib/apt/lists )" ] \\
    || [ ! -f /var/cache/apt/pkgcache.bin ] \\
    || [ "\$( stat --format %Y /var/cache/apt/pkgcache.bin )" -lt "\$( date +%s -d '-$maxage seconds' )" ]
then
    apt-get $apt_opts update || apt-get $apt_opts update
    touch -c /var/lib/apt/lists
fi
EOF

        echo "${aptget} ${recommendsparam} install${target_release:+ --target-release '${target_release}'} '${name}'"
        echo 'installed' >>"${__messages_out:?}"
    ;;
    absent)
        if test "${state_is}" != 'absent' \
        || test -f "${__object:?}/parameter/purge-if-absent" -a "${config_state}" != 'purged'
        then
            echo "${aptget} remove ${purgeparam} '${name_is}'"
            echo 'removed' >>"${__messages_out:?}"
        fi
    ;;
    *)
        echo "Unknown state: $state_should" >&2
        exit 1
    ;;
esac
