#!/bin/sh -e
#
# 2011-2015 Steven Armstrong (steven-cdist at armstrong.cc)
# 2011 Nico Schottelius (nico-cdist at schottelius.org)
# 2024 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

os=$(cat "${__global:?}/explorer/os")

name=${__object_id:?}
state_should=$(cat "${__object:?}/parameter/state")

shquot() {
	sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<-EOF
	$*
	EOF
}

# Use short option names for portability
shorten_property() {
	case $1
	in
		(gid) echo '-g' ;;
		(password) echo '-p' ;;
		(system) echo '-r' ;;
	esac
}


case ${state_should}
in
	(present)
		case ${os}
		in
			(freebsd)
				supported_change_properties='gid'
				;;
			(*)
				supported_change_properties='gid password'
				;;
		esac

		if test -s "${__object:?}/explorer/group"
		then
			# change existing
			for property in ${supported_change_properties}
			do
				if test -f "${__object:?}/parameter/${property}"
				then
					new_value=$(cat "${__object:?}/parameter/${property}")
					unset -v current_value

					case ${property}
					in
						(password)
							current_value=$(awk -F: '{ print $2 }' "${__object:?}/explorer/gshadow")
							;;
						(gid)
							current_value=$(awk -F: '{ print $3 }' "${__object:?}/explorer/group")
							;;
					esac

					if test "${new_value}" != "${current_value}"
					then
						set -- "$@" "$(shorten_property "${property}")" "$(shquot "${new_value}")"
						echo "change ${property} ${new_value} ${current_value}" >>"${__messages_out:?}"
					fi
				fi
			done

			if test $# -gt 0
			then
				case ${os}
				in
					(freebsd)
						printf 'pw groupmod %s %s\n' "$*" "$(shquot "${name}")"
						;;
					(netbsd|openbsd)
						printf 'group mod %s %s\n' "$*" "$(shquot "${name}")"
						;;
					(*)
						printf 'groupmod %s %s\n' "$*" "$(shquot "${name}")"
						;;
				esac
			fi
			echo mod >>"${__messages_out:?}"
		else
			# create new
			for property in ${supported_change_properties}
			do
				if test -f "${__object:?}/parameter/${property}"
				then
					new_value=$(cat "${__object:?}/parameter/${property}")

					set -- "$@" "$(shorten_property "$property")" ${new_value:+\'"$new_value"\'}
				fi
			done

			case ${os}
			in
				(freebsd)
					printf 'pw groupadd %s %s\n' "$(shquot "${name}")" "$*"
					;;
				(netbsd|openbsd)
					printf 'group add %s %s\n' "$*" "$(shquot "${name}")"
					;;
				(*)
					printf 'groupadd %s %s\n' "$*" "$(shquot "${name}")"
					;;
			esac
		fi
		;;
	(absent)
		if test -s "${__object:?}/explorer/group"
		then
			# delete existing
			case ${os}
			in
				(freebsd)
					printf 'pw groupdel %s\n' "$(shquot "${name}")"
					;;
				(netbsd|openbsd)
					printf 'group del %s\n' "$(shquot "${name}")"
					;;
				(*)
					printf 'groupdel %s\n' "$(shquot "${name}")"
					;;
			esac
			echo remove >>"${__messages_out:?}"
		fi
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac
