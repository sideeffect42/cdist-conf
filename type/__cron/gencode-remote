#!/bin/sh -e
#
# 2011 Steven Armstrong (steven-cdist at armstrong.cc)
# 2013 Nico Schottelius (nico-cdist at schottelius.org)
# 2017 Daniel Heule (hda at sfs.biz)
# 2022 Dennis Camera (skonfig at dtnr.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

. "${__type:?}/files/functions.sh"

entry_replace_cmd() {
	# NOTE: make sure that the snippet does not process escape sequences in the
	#       command
	printf "SUFFIX=%s ENTRY=%s awk 'function prtrepl(){if(!p&&ENVIRON[\"ENTRY\"])print ENVIRON[\"ENTRY\"];p=1} !/^[ \\\\t]*#/ && substr(\$0, length(\$0)-length(ENVIRON[\"SUFFIX\"])+1) == ENVIRON[\"SUFFIX\"] {prtrepl();next} {print} END {prtrepl()}'\\n" \
		"$(quote "$1")" \
		"$(quote "$2")"
}

name=${__object_name:?}
user=$(cat "${__object:?}/parameter/user")
command=$(cat "${__object:?}/parameter/command")

if test -f "${__object:?}/parameter/raw_command"
then
	echo 'error: parameter --raw_command is not supported anymore.' >&2
	exit 1
elif test -f "${__object:?}/parameter/raw"
then
	read -r when <"${__object:?}/parameter/raw"
else
	read -r minute <"${__object:?}/parameter/minute"
	read -r hour <"${__object:?}/parameter/hour"
	if test -f "${__object:?}/parameter/day_of_month"
	then
		# deprecated name
		read -r day_of_month <"${__object:?}/parameter/day_of_month"
	else
		read -r day_of_month <"${__object:?}/parameter/day-of-month"
	fi
	read -r month <"${__object:?}/parameter/month"
	if test -f "${__object:?}/parameter/day_of_week"
	then
		# deprecated name
		read -r day_of_week <"${__object:?}/parameter/day_of_week"
	else
		read -r day_of_week <"${__object:?}/parameter/day-of-week"
	fi
	when="${minute} ${hour} ${day_of_month} ${month} ${day_of_week}"
fi

entry="${when} ${command}  # ${name}"

if test -s "${__object:?}/explorer/entry"
then
	if printf '%s\n' "${entry}" | cmp -s - "${__object:?}/explorer/entry"
	then
		state_is=present
	else
		state_is=modified
	fi
else
	state_is=absent
fi

state_should=$(cat "${__object:?}/parameter/state")

test "${state_is}" != "${state_should}" || exit 0

. "${__type:?}/files/commands.sh"

entry_marker=" # ${name}"

case ${state_should}
in
	(present)
		;;
	(absent)
		# unset $entry to make the code below remove the line
		entry=
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac

# assert that $entry only has one line to avoid fucking up the crontab
test $(count_lines "${entry-}") -le 1 || {
	echo 'crontab entries must contain exactly one line.' >&2
	exit 1
}

# print commands necessary to execute other commands, first
prepare_cmds

# NOTE: We need to lock against parallel execution with __cron because
#       both types modify the same "file" and crontab(1) does not
#       synchronization of its own.
sed -e '/^#/d' -e '/^$/d' "${__type:?}/files/lock.sh"

printf '%s | %s | %s\n' \
	"${crontab_print_cmd?}" \
	"$(entry_replace_cmd "${entry_marker?}" "${entry?}")" \
	"${crontab_update_cmd?}"
