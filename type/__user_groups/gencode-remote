#!/bin/sh -e
#
# 2012 Steven Armstrong (steven-cdist at armstrong.cc)
# 2024 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

shquot() {
	sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<-EOF
	$*
	EOF
}

os=$(cat "${__global:?}/explorer/os")

state_should=$(cat "${__object:?}/parameter/state")
if test -s "${__object:?}/parameter/user"
then
	user=$(cat "${__object:?}/parameter/user")
else
	user=${__object_id:?}
fi


comm_groups() {
	# Groups have to be sorted for comparison with comm(1).
	# We use LC_ALL=C both in the explorer and here to avoid any locale
	# differences.

	LC_ALL=C sort "${__object:?}/parameter/group" \
	| LC_ALL=C comm "$@" "${__object:?}/explorer/groups" -
}

group_list() {
	(
		for g
		do
			set -- "$@" "$(shquot "${g}")"
			shift
		done
		IFS=,; echo "$*"
	)
}

should_groups_list() (
		IFS=$(printf '\n	')  # tab for comm output prefix
		set -- $(comm_groups)
		group_list "$@"
)


case ${state_should}
in
	(present)
		changed_groups=$(comm_groups -13)
		;;
	(absent)
		changed_groups=$(comm_groups -12)
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac

if test -z "${changed_groups}"
then
	# nothing to do
	exit 0
fi

case ${os}
in
	(netbsd)
		case ${state_should}
		in
			(present)
				# -G adds new groups. (tested on NetBSD 6+)
				printf 'user mod -G %s %s\n' \
					"$(group_list ${changed_groups})" "$(shquot "${user}")"
				;;
			(absent)
				echo 'NetBSD does not have a command to remove users from groups.' >&2
				exit 1
				;;
		esac
		;;
	(openbsd)
		read -r os_version <"${__global:?}/explorer/os_version"

		case ${state_should}
		in
			(present)
				case ${os_version}
				in
					(0.*|1.*|2.[0-6])
						printf 'OpenBSD %s does not provide a command to manage group members.\n' "${os_version}" >&2
						exit 1
						;;
					(2.*)
						# OpenBSD 2.7+: -G sets the group list
						printf 'user mod -G %s %s\n' \
							"$(should_groups_list)" \
							"$(shquot "${user}")"
						;;
					(*)
						# OpenBSD 3.0+: -G adds to the group list
						printf 'user mod -G %s %s\n' \
							"$(group_list ${changed_groups})" \
							"$(shquot "${user}")"
						;;
				esac
				;;
			(absent)
				case ${os_version}
					(0.*|1.*|2.[0-6])
						printf 'OpenBSD %s does not provide a command to manage group members.\n' "${os_version}" >&2
						exit 1
						;;
					(2.*)
						# OpenBSD 2.7+: -G sets the group list
						printf 'user mod -G %s %s\n' \
							"$(should_groups_list)" \
							"$(shquot "${user}")"
						;;
					([34].*|5.0)
						printf 'OpenBSD %s does not provide a command to remove users from groups.\n' "${os_version}" >&2
						exit 1
						;;
					(*)
						# OpenBSD 5.1+: -S sets the group list
						printf 'user mod -S %s %s\n' \
							"$(should_groups_list)" \
							"$(shquot "${user}")"
						;;
				esac
				;;
		esac
		;;
	(freebsd)
		user_quoted=$(shquot "${user}")
		case ${state_should}
		in
			(present)
				for g in ${changed_groups}
				do
					printf 'pw groupmod -n %s -m %s\n' \
						"$(shquot "${g}")" "${user_quoted}"
				done
				;;
			(absent)
				for g in ${changed_groups}
				do
					printf 'pw groupmod -n %s -d %s\n' \
						"$(shquot "${g}")" "${user_quoted}"
				done
				;;
		esac
		;;
	(haiku)
		user_quoted=$(shquot "${user}")
		case ${state_should}
		in
			(present)
				for g in ${changed_groups}
				do
					printf 'groupmod -A %s %s\n' \
						"${user_quoted}" "$(shquot "${g}")"
				done
				;;
			(absent)
				for g in ${changed_groups}
				do
					printf 'groupmod -R %s %s\n' \
						"${user_quoted}" "$(shquot "${g}")"
				done
				;;
		esac
		;;
	(suse)
		if test -s "${__global:?}/explorer/os_release"
		then
			# shellcheck source=/dev/null
			os_version=$(. "${__global:?}/explorer/os_release" && echo "${VERSION}")
		else
			os_version=$(sed -n 's/^VERSION\ *=\ *//p' "${__global:?}/explorer/o
s_version")
		fi
		os_major=$(expr "${os_version}" : '\([0-9]\{1,\}\)')

		if test "${os_major}" -lt 12
		then
			# only old SuSE :-( (<12)
			user_quoted=$(shquot "${user}")
			case ${state_should}
			in
				(present)
					for g in ${changed_groups}
					do
						printf 'groupmod -A %s %s\n' \
							   "${user_quoted}" "$(shquot "${g}")"
					done
					;;
				(absent)
					for g in ${changed_groups}
					do
						printf 'groupmod -R %s %s\n' \
							   "${user_quoted}" "$(shquot "${g}")"
					done
					;;
			esac
		else
			# TODO: use gpasswd
		fi

		# Alternative: OpenSuSE 11 (not 10.2)
		#case ${state_should}
		#in
		#	(present)
		#		echo "usermod -A \"$groups_comma_sep\" \"$user\""
		#		;;
		#	(absent)
		#		echo "usermod -R \"$groups_comma_sep\" \"$user\""
		#		;;
		#esac
		;;
	(alpine|debian|devuan|ubuntu|pop-os|fedora|rhel|centos|scientific|almalinux|rocky|gentoo|guix|slackware)
		user_quoted=$(shquot "${user}")
		case ${state_should}
		in
			(present)
				for g in ${changed_groups}
				do
					printf 'gpasswd -a %s %s\n' \
						"${user_quoted}" "$(shquot "${g}")"
				done
				;;
			(absent)
				for g in ${changed_groups}
				do
					printf 'gpasswd -d %s %s\n' \
						"${user_quoted}" "$(shquot "${g}")"
				done
				;;
		esac
		;;
	(solaris)
		printf 'usermod -G %s %s\n' \
			"$(should_groups_list)" "$(shquot "${user}")"
		;;
	(*)
		# ???
		exit 1
		;;
esac
