#!/bin/sh -e
#
# 2011 Steven Armstrong (steven-cdist at armstrong.cc)
# 2011 Nico Schottelius (nico-cdist at schottelius.org)
# 2013 Daniel Heule (hda at sfs.biz)
# 2018 Thomas Eckert (tom at it-eckert.de)
# 2022,2024 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

name=${__object_id:?}

os=$(cat "${__global:?}/explorer/os")
state_should=$(cat "${__object:?}/parameter/state")

# We need to shorten options for both usermod and useradd since on some
# systems (such as *BSD, Darwin) those commands do not handle GNU style long
# options.
shorten_property() {
	case $1
	in
		(comment)
			echo '-c' ;;
		(home)
			echo '-d' ;;
		(gid)
			echo '-g' ;;
		(groups)
			echo '-G' ;;
		(password)
			echo '-p' ;;
		(shell)
			echo '-s' ;;
		(uid)
			echo '-u' ;;
		(create-home)
			echo '-m' ;;
		(system)
			echo '-r' ;;
    esac
}

quote_ifneeded() {
	# copied from type/__uci/files/functions.sh
	for _arg
	do
		shift
		if test -n "$(printf %s "${_arg}" | tr -d -c '\t\n \042-\047\050-\052\073-\077\133\\`|~' | tr -c '' '.')"
		then
			# needs quoting
			set -- "$@" "'$(printf '%s\n' "${_arg}" | sed -e "s/'/'\\\\''/g")'"
		else
			set -- "$@" "${_arg}"
		fi
	done
	unset _arg

	# NOTE: Use printf because POSIX echo interprets escape sequences
	printf '%s' "$*"
}


do_user() {
	_user_op=$1
	_user_name=$2
	shift 2

	case ${os:?}
	in
		(freebsd)
			# FreeBSD uses the pw wrapper utility and -n for the name
			set -- pw "user${_user_op}" "$@" -n "${_user_name}"
			;;
		(openbsd|netbsd)
			# OpenBSD/NetBSD use the user wrapper utility
			set -- user "${_user_op}" "$@" "${_user_name}"
			;;
		(openwrt)
			# NOTE: older releases of OpenWrt do not include sbin in PATH, but
			#       user* utilities are installed in /usr/sbin.
			echo 'PATH=/bin:/sbin:/usr/bin:/usr/sbin'
			set -- "user${_user_op}" "$@" "${_user_name}"
			;;
		(*)
			set -- "user${_user_op}" "$@" "${_user_name}"
			;;
	esac
	unset -v _util_name _user_name

	# quote arguments if needed
	quote_ifneeded "$@"; echo
}

case ${state_should}
in
	(present)
		cd "${__object:?}/parameter"

		if test -s "${__object:?}/explorer/passwd"
		then
			# user exists already
			for property in *
			do
				unset -v current_value field
				new_value=$(cat "${property}")
				file="${__object:?}/explorer/passwd"

				case ${property}
				in
					(gid)
						field=4

						# We always try to interpret the gid we are given as a
						# group name, cf. also the comment in explorer/group.
						# We thus try to resolve the gid from the user's
						# passwd entry to the respective group name to compare.
						gid_from_passwd=$(cut -d : -f 4 "${__object:?}/explorer/passwd")
						gid_from_group=$(cut -d : -f 3 "${__object:?}/explorer/group")

						# default: assume the group is different and thus we
						# cannot resolve its name:
						current_value=${gid_from_passwd}

						if test "${gid_from_group}" -eq "${gid_from_passwd}"
						then
							# The group explorer returned the user's primary
							# group. Now we check if the group's name matches
							# the should value, and if so, we resolve the name
							# because no change is needed.
							if test "$(cut -d : -f 1 "${__object:?}/explorer/group")" = "${new_value}"
							then
								current_value=${new_value}
							fi
							# else: default below
						fi
						;;
					(password)
						field=2
						file="${__object:?}/explorer/shadow"
						;;
					(comment) field=5 ;;
					(home)    field=6 ;;
					(shell)   field=7 ;;
					(uid)     field=3 ;;
					(create-home|system|remove-home)
						# Does not apply to user modification
						continue
						;;
					(state)
						# Does not apply to user modification
						continue
						;;
				esac

				# If we haven't already set $current_value above, pull it from the
				# appropriate file/field.
				: ${current_value:=$(awk -F: -v f=$((field)) '{ print $f }' <"${file}")}

				if test "${new_value}" != "${current_value}"
				then
					set -- "$@" "$(shorten_property "${property}")" "${new_value}"
				fi
			done

			if test $# -gt 0
			then
				do_user mod "${name}" "$@"
				echo mod >>"${__messages_out:?}"
			fi
		else
			# user does not already exist

			for property in *
			do
				case ${property}
				in
					(remove-home)
						continue ;;
					(state)
						continue ;;
					(*)
						new_value=$(cat ${property})

						# Boolean options have no value, so new_value must be conditional.
						set -- "$@" "$(shorten_property "${property}")" ${new_value:+"${new_value}"}
						;;
				esac
			done

			do_user add "${name}" "$@"
			echo add >>"${__messages_out:?}"
		fi
		;;
	(absent)
		if test -s "${__object:?}/explorer/passwd"
		then
			set --
			if test -f "${__object:?}/parameter/remove-home"
			then
				set -- "$@" -r
			fi

			do_user del "${name}" "$@"
			echo "del $*" >>"${__messages_out:?}"
			# legacy, use del only in the future, like in the other cases
			echo "userdel $*" >>"${__messages_out:?}"
		fi
		;;
	(*)
		printf 'Invalid state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac
